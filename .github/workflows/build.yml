name: Build Dashboard Packages

on:
  push:
    branches: [ main ]   # push 到 main 分支时触发
  workflow_dispatch:      # 手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-14]  # Win, Mac Intel, Mac ARM
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Download MongoDB
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L -o mongodb.zip https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-6.0.18.zip
            powershell -Command "Expand-Archive mongodb.zip -DestinationPath ."
            mkdir -p mongodb/bin
            cp */bin/mongod.exe mongodb/bin/ || echo "mongod.exe not found"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            if [[ "$(uname -m)" == "x86_64" ]]; then
              curl -L -o mongodb.tgz https://fastdl.mongodb.org/osx/mongodb-macos-x86_64-6.0.18.tgz
            else
              curl -L -o mongodb.tgz https://fastdl.mongodb.org/osx/mongodb-macos-arm64-6.0.18.tgz
            fi
            tar -xzf mongodb.tgz
            mkdir -p mongodb/bin
            cp */bin/mongod mongodb/bin/ || echo "mongod not found"
            chmod +x mongodb/bin/mongod || true
          fi

      - name: Build executable
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            pyinstaller --onefile --windowed run_app.py --add-binary "mongodb/bin/mongod.exe;mongodb/bin"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            pyinstaller --onefile --windowed run_app.py --add-binary "mongodb/bin/mongod:mongodb/bin"
          fi

      - name: Prepare package
        run: |
          mkdir package
          cp -r dist/* package/
          cp -r charts package/
          cp -r services package/
          cp app.py package/
          cp run_app.py package/
          cp requirements.txt package/
          # 生成 README.txt
          cat <<'EOF' > package/README.txt
====================================
 ManlyFarm Dashboard 使用说明 (中文)
====================================
一、Windows 用户
1. 解压缩 `ManlyFarm_Windows.zip`
2. 双击运行 `run_app.exe`
3. 等待 5–10 秒，浏览器会自动打开 http://localhost:8501

二、Mac Intel 用户 (x86_64)
1. 解压缩 `ManlyFarm_Mac_Intel.zip`
2. 双击运行 `run_app.app`
3. 如果提示未知开发者，请右键 → 打开

三、Mac ARM 用户 (M1/M2)
1. 解压缩 `ManlyFarm_Mac_ARM.zip`
2. 双击运行 `run_app.app`
3. 如果提示未知开发者，请右键 → 打开

====================================
 ManlyFarm Dashboard Instructions (English)
====================================
1. Windows Users
   - Unzip `ManlyFarm_Windows.zip`
   - Double-click `run_app.exe`
   - Wait 5–10s → Browser opens at http://localhost:8501

2. Mac Intel Users (x86_64)
   - Unzip `ManlyFarm_Mac_Intel.zip`
   - Double-click `run_app.app`
   - If “unidentified developer” appears → right-click → Open

3. Mac ARM Users (M1/M2)
   - Unzip `ManlyFarm_Mac_ARM.zip`
   - Double-click `run_app.app`
   - If “unidentified developer” appears → right-click → Open

Notes:
- Keep folder structure intact
- Do not delete `mongodb/data/`
EOF

      - name: Zip package
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command "Compress-Archive -Path package/* -DestinationPath ManlyFarm_Windows.zip"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            if [[ "$(uname -m)" == "x86_64" ]]; then
              zip -r ManlyFarm_Mac_Intel.zip package
            else
              zip -r ManlyFarm_Mac_ARM.zip package
            fi
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-package
          path: "*.zip"
